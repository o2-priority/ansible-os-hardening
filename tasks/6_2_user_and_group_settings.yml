---

# 6.2.1 Ensure password fields are not empty (Scored)
- name: Get unix accounts with empty password field
  shell: >
      cat /etc/shadow | awk -F: '($2 == "" ) { print $1}'
  register: empty_password_accounts
  changed_when: False

- name: Lock accounts with empty password field
  command: passwd -l {{ item }}
  with_items: "{{ empty_password_accounts.stdout_lines }}"
  when: "'6.2.1' not in os_hardening_exclusions"
  tags: [ scored, '6.2.1' ]


# 6.2.2 Ensure no legacy "+" entries exist in /etc/passwd (Scored)
# 6.2.3 Ensure no legacy "+" entries exist in /etc/shadow (Scored)
# 6.2.4 Ensure no legacy "+" entries exist in /etc/group (Scored)
- name: Ensure no legacy "+" entries exist in system configuration files
  lineinfile:
    path:   "{{ item.name }}"
    regexp: '^\+:'
    state:  absent
  with_items: "{{ os_hardening_system_config_files }}"
  when: item.cis_id not in os_hardening_exclusions
  tags:
    - scored
    - 6.2.2
    - 6.2.3
    - 6.2.4


# 6.2.5 Ensure root is the only UID 0 account (Scored)
- name: Get UID 0 accounts
  shell: >
      cat /etc/passwd | awk -F: '($3 == 0) { print $1 }'
  register: uid_0_accounts
  changed_when: False

- name: Lock non-root UID 0 accounts
  command: passwd -l {{ item }}
  with_items: "{{ uid_0_accounts.stdout_lines }}"
  when: "item != 'root' and '6.2.5' not in os_hardening_exclusions"
  tags: [ scored, '6.2.5' ]

- name: Ensure root is the only UID 0 account
  lineinfile:
    path: /etc/passwd
    regexp: '^{{ item.1 }}:(.*?):0:(.*)'
    line:   '{{ item.1 }}:\1:{{ 5900 + item.0 }}:\2'
    backrefs: yes
  with_indexed_items: "{{ uid_0_accounts.stdout_lines }}"
  when: "item.1 != 'root' and '6.2.5' not in os_hardening_exclusions"
  tags: [ scored, '6.2.5' ]

# Auxilliary task
- name: Create scripts dir
  file:
    path:  "{{ os_hardening_scripts_dir }}"
    owner: root
    group: root
    mode:  0755
    state: directory


# 6.2.6 Ensure root PATH Integrity (Scored)
- name: Copy script to check root PATH integrity
  copy:
    src:  root_path_integrity_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/root_path_integrity_audit.sh"
    mode: 0700
  when: "'6.2.6' not in os_hardening_exclusions"
  tags: [ scored, '6.2.6' ]

- name: Run root PATH integrity audit script
  command: "{{ os_hardening_scripts_dir }}/root_path_integrity_audit.sh"
  register: root_path_integrity
  changed_when: False
  when: "'6.2.6' not in os_hardening_exclusions"
  tags: [ scored, '6.2.6' ]

- name: Print output of root PATH integrity audit script
  debug: var=root_path_integrity.stdout_lines
  when: not root_path_integrity|skipped

- name: Print remediation guide if integrity issues found
  debug: msg="Remediation | Correct or justify any items discovered by the audit script."
  when: not root_path_integrity|skipped


# 6.2.7 Ensure all users' home directories exist (Scored)
- name: Copy script to audit user home directories
  copy:
    src:  home_dirs_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/home_dirs_audit.sh"
    mode: 0700
  when: "'6.2.7' not in os_hardening_exclusions"
  tags: [ scored, '6.2.7' ]

- name: Run home dirs audit script
  command: "{{ os_hardening_scripts_dir }}/home_dirs_audit.sh"
  register: home_dirs_audit
  changed_when: False
  when: "'6.2.7' not in os_hardening_exclusions"
  tags: [ scored, '6.2.7' ]

- name: Print output of home dirs audit script
  debug: var=home_dirs_audit.stdout_lines
  when: not home_dirs_audit|skipped

- name: Ensure all users' home directories exist
  user:
    name: "{{ item }}"
    home: "/home/{{ item }}"
    createhome: yes
  with_items: "{{ home_dirs_audit.stdout_lines }}"
  when: not home_dirs_audit|skipped


# 6.2.8 Ensure users' home directories permissions are 750 or more restrictive (Scored)
- name: Copy script to audit user home directories permissions
  copy:
    src:  home_dirs_perms_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/home_dirs_perms_audit.sh"
    mode: 0700
  when: "'6.2.8' not in os_hardening_exclusions"
  tags: [ scored, '6.2.8' ]

- name: Run home dirs permissions audit script
  command: "{{ os_hardening_scripts_dir }}/home_dirs_perms_audit.sh"
  register: home_dirs_perms_audit
  changed_when: False
  when: "'6.2.8' not in os_hardening_exclusions"
  tags: [ scored, '6.2.8' ]

- name: Print output of home dirs permissions audit script
  debug: var=home_dirs_perms_audit.stdout_lines
  when: not home_dirs_perms_audit|skipped

- name: Ensure users' home directories permissions are 750 or more restrictive
  file:
    path: "{{ item }}"
    mode: 0750
    follow: yes
  with_items: "{{ home_dirs_perms_audit.stdout_lines }}"
  when: not home_dirs_perms_audit|skipped


# 6.2.9 Ensure users own their home directories (Scored)
- name: Copy script to audit user home directories ownership
  copy:
    src:  home_dirs_owner_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/home_dirs_owner_audit.sh"
    mode: 0700
  when: "'6.2.9' not in os_hardening_exclusions"
  tags: [ scored, '6.2.9' ]

- name: Run home dirs ownership audit script
  command: "{{ os_hardening_scripts_dir }}/home_dirs_owner_audit.sh"
  register: home_dirs_owner_audit
  changed_when: False
  when: "'6.2.9' not in os_hardening_exclusions"
  tags: [ scored, '6.2.9' ]

- name: Print output of home dirs ownership audit script
  debug: var=home_dirs_owner_audit.stdout_lines
  when: not home_dirs_owner_audit|skipped

- name: Ensure users own their home directories
  file:
    path: "{{ item.split(':')[0] }}"
    owner: "{{ item.split(':')[1] }}"
  with_items: "{{ home_dirs_owner_audit.stdout_lines }}"
  when: not home_dirs_owner_audit|skipped


# 6.2.10 Ensure users' dot files are not group or world writable (Scored)
- name: Copy script to audit users dot files group or world permissions
  copy:
    src:  user_dotfiles_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/user_dotfiles_audit.sh"
    mode: 0700
  when: "'6.2.10' not in os_hardening_exclusions"
  tags: [ scored, '6.2.10' ]

- name: Run user dotfiles audit script
  command: "{{ os_hardening_scripts_dir }}/user_dotfiles_audit.sh"
  register: user_dotfiles_audit
  changed_when: False
  when: "'6.2.10' not in os_hardening_exclusions"
  tags: [ scored, '6.2.10' ]

- name: Print user dotfiles to resolve permissions for
  debug: var=user_dotfiles_audit.stdout_lines
  when: not user_dotfiles_audit|skipped

# Remediation:
#     Making global modifications to users' files without alerting the user community can
#     result in unexpected outages and unhappy users. Therefore, it is recommended that a
#     monitoring policy be established to report user dot file permissions and determine
#     the action to be taken in accordance with site policy.
# However, taking a more conservative approach to resolve.
- name: Ensure users' dot files are not group or world writable
  file:
    path: "{{ item }}"
    mode: "go-w"
  with_items: "{{ user_dotfiles_audit.stdout_lines }}"
  when: not user_dotfiles_audit|skipped


# 6.2.11 Ensure no users have .forward files (Scored)
- name: Copy script to audit users .forward files
  copy:
    src:  user_dot_forward_file_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/user_dot_forward_file_audit.sh"
    mode: 0700
  when: "'6.2.11' not in os_hardening_exclusions"
  tags: [ scored, '6.2.11' ]

- name: Run user .forward file audit script
  command: "{{ os_hardening_scripts_dir }}/user_dot_forward_file_audit.sh"
  register: user_dot_forward_file_audit
  changed_when: False
  when: "'6.2.11' not in os_hardening_exclusions"
  tags: [ scored, '6.2.11' ]

- name: Print user .forward files that exist
  debug: var=user_dot_forward_file_audit.stdout_lines
  when: not user_dot_forward_file_audit|skipped

# Remediation:
#     Making global modifications to users' files without alerting the user community can
#     result in unexpected outages and unhappy users. Therefore, it is recommended that a
#     monitoring policy be established to report user .forward files and determine
#     the action to be taken in accordance with site policy.
# However, taking a more conservative approach to resolve.
- name: Ensure no users have .forward files
  file:
    path:  "{{ item }}"
    state: absent
  with_items: "{{ user_dot_forward_file_audit.stdout_lines }}"
  when: not user_dot_forward_file_audit|skipped


# 6.2.12 Ensure no users have .netrc files (Scored)
- name: Copy script to audit users .netrc files
  copy:
    src:  user_dot_netrc_file_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/user_dot_netrc_file_audit.sh"
    mode: 0700
  when: "'6.2.12' not in os_hardening_exclusions"
  tags: [ scored, '6.2.12' ]

- name: Run user .netrc file audit script
  command: "{{ os_hardening_scripts_dir }}/user_dot_netrc_file_audit.sh"
  register: user_dot_netrc_file_audit
  changed_when: False
  when: "'6.2.12' not in os_hardening_exclusions"
  tags: [ scored, '6.2.12' ]

- name: Print user .netrc files that exist
  debug: var=user_dot_netrc_file_audit.stdout_lines
  when: not user_dot_netrc_file_audit|skipped

# Remediation:
#     Making global modifications to users' files without alerting the user community can
#     result in unexpected outages and unhappy users. Therefore, it is recommended that a
#     monitoring policy be established to report user .netrc files and determine
#     the action to be taken in accordance with site policy.
# However, taking a more conservative approach to resolve.
- name: Ensure no users have .netrc files
  file:
    path:  "{{ item }}"
    state: absent
  with_items: "{{ user_dot_netrc_file_audit.stdout_lines }}"
  when: not user_dot_netrc_file_audit|skipped


# 6.2.13 Ensure users' .netrc Files are not group or world accessible (Scored)
- name: Copy script to audit users .netrc files permission
  copy:
    src:  user_dot_netrc_file_perms_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/user_dot_netrc_file_perms_audit.sh"
    mode: 0700
  when: "'6.2.13' not in os_hardening_exclusions"
  tags: [ scored, '6.2.13' ]

- name: Run user .netrc file permission audit script
  command: "{{ os_hardening_scripts_dir }}/user_dot_netrc_file_perms_audit.sh"
  register: user_dot_netrc_file_perms_audit
  changed_when: False
  when: "'6.2.13' not in os_hardening_exclusions"
  tags: [ scored, '6.2.13' ]

- name: Print user .netrc files with not recommended permission
  debug: var=user_dot_netrc_file_perms_audit.stdout_lines
  when: not user_dot_netrc_file_perms_audit|skipped

# Remediation:
#     Making global modifications to users' files without alerting the user community can
#     result in unexpected outages and unhappy users. Therefore, it is recommended that a
#     monitoring policy be established to report user .netrc file permission and determine
#     the action to be taken in accordance with site policy.
# However, taking a more conservative approach to resolve.
- name: Ensure users' .netrc Files are not group or world accessible
  file:
    path: "{{ item }}"
    mode: "go-rwx"
  with_items: "{{ user_dot_netrc_file_perms_audit.stdout_lines }}"
  when: not user_dot_netrc_file_perms_audit|skipped


# 6.2.14 Ensure no users have .rhosts files (Scored)
- name: Copy script to audit users .rhosts files
  copy:
    src:  user_dot_rhosts_file_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/user_dot_rhosts_file_audit.sh"
    mode: 0700
  when: "'6.2.14' not in os_hardening_exclusions"
  tags: [ scored, '6.2.14' ]

- name: Run user .rhosts file audit script
  command: "{{ os_hardening_scripts_dir }}/user_dot_rhosts_file_audit.sh"
  register: user_dot_rhosts_file_audit
  changed_when: False
  when: "'6.2.14' not in os_hardening_exclusions"
  tags: [ scored, '6.2.14' ]

- name: Print user .rhosts files
  debug: var=user_dot_rhosts_file_audit.stdout_lines
  when: not user_dot_rhosts_file_audit|skipped

# Remediation:
#     Making global modifications to users' files without alerting the user community can
#     result in unexpected outages and unhappy users. Therefore, it is recommended that a
#     monitoring policy be established to report user .rhosts files and determine
#     the action to be taken in accordance with site policy.
# However, taking a more conservative approach to resolve.
- name: Ensure no users have .rhosts files
  file:
    path:  "{{ item }}"
    state: absent
  with_items: "{{ user_dot_rhosts_file_audit.stdout_lines }}"
  when: not user_dot_rhosts_file_audit|skipped


# 6.2.15 Ensure all groups in /etc/passwd exist in /etc/group (Scored)
- name: Copy script to audit user groups in /etc/passwd
  copy:
    src:  user_groups_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/user_groups_audit.sh"
    mode: 0700
  when: "'6.2.15' not in os_hardening_exclusions"
  tags: [ scored, '6.2.15' ]

- name: Run user groups audit script
  command: "{{ os_hardening_scripts_dir }}/user_groups_audit.sh"
  register: user_groups_audit
  changed_when: False
  when: "'6.2.15' not in os_hardening_exclusions"
  tags: [ scored, '6.2.15' ]

# Remediation:
#     Analyze the output of the Audit step above and perform the appropriate action to
#     correct any discrepancies found.
- name: Print user gids in /etc/passwd that do not exist in /etc/group
  debug: var=user_groups_audit.stdout_lines
  when: not user_groups_audit|skipped


# 6.2.16 Ensure no duplicate UIDs exist (Scored)
- name: Copy script to audit duplicate uids
  copy:
    src:  duplicate_uids_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/duplicate_uids_audit.sh"
    mode: 0700
  when: "'6.2.16' not in os_hardening_exclusions"
  tags: [ scored, '6.2.16' ]

- name: Run duplicate uids audit script
  command: "{{ os_hardening_scripts_dir }}/duplicate_uids_audit.sh"
  register: duplicate_uids_audit
  changed_when: False
  when: "'6.2.16' not in os_hardening_exclusions"
  tags: [ scored, '6.2.16' ]

# Remediation:
#     Based on the results of the audit script, establish unique UIDs and review all
#     files owned by the shared UIDs to determine which UID they are supposed to belong to.
- name: Print duplicate uids
  debug: var=duplicate_uids_audit.stdout_lines
  when: not duplicate_uids_audit|skipped


# 6.2.17 Ensure no duplicate GIDs exist (Scored)
- name: Copy script to audit duplicate gids
  copy:
    src:  duplicate_gids_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/duplicate_gids_audit.sh"
    mode: 0700
  when: "'6.2.17' not in os_hardening_exclusions"
  tags: [ scored, '6.2.17' ]

- name: Run duplicate gids audit script
  command: "{{ os_hardening_scripts_dir }}/duplicate_gids_audit.sh"
  register: duplicate_gids_audit
  changed_when: False
  when: "'6.2.17' not in os_hardening_exclusions"
  tags: [ scored, '6.2.17' ]

# Remediation:
#     Based on the results of the audit script, establish unique GIDs and review all
#     files owned by the shared GID to determine which group they are supposed to belong to.
- name: Print duplicate gids
  debug: var=duplicate_gids_audit.stdout_lines
  when: not duplicate_gids_audit|skipped


# 6.2.18 Ensure no duplicate user names exist (Scored)
- name: Copy script to audit duplicate user names
  copy:
    src:  duplicate_user_names_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/duplicate_user_names_audit.sh"
    mode: 0700
  when: "'6.2.18' not in os_hardening_exclusions"
  tags: [ scored, '6.2.18' ]

- name: Run duplicate user names audit script
  command: "{{ os_hardening_scripts_dir }}/duplicate_user_names_audit.sh"
  register: duplicate_user_names_audit
  changed_when: False
  when: "'6.2.18' not in os_hardening_exclusions"
  tags: [ scored, '6.2.18' ]

# Remediation:
#     Based on the results of the audit script, establish unique user names for the users.
#     users. File ownerships will automatically reflect the change as long as the users
#     have unique UIDs.
- name: Print duplicate user names
  debug: var=duplicate_user_names_audit.stdout_lines
  when: not duplicate_user_names_audit|skipped


# 6.2.19 Ensure no duplicate group names exist (Scored)
- name: Copy script to audit duplicate group names
  copy:
    src:  duplicate_group_names_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/duplicate_group_names_audit.sh"
    mode: 0700
  when: "'6.2.19' not in os_hardening_exclusions"
  tags: [ scored, '6.2.19' ]

- name: Run duplicate group names audit script
  command: "{{ os_hardening_scripts_dir }}/duplicate_group_names_audit.sh"
  register: duplicate_group_names_audit
  changed_when: False
  when: "'6.2.19' not in os_hardening_exclusions"
  tags: [ scored, '6.2.19' ]

# Remediation:
#     Based on the results of the audit script, establish unique names for the user
#     groups. File group ownerships will automatically reflect the change as long as the
#     groups have unique GIDs.
- name: Print duplicate group names
  debug: var=duplicate_group_names_audit.stdout_lines
  when: not duplicate_group_names_audit|skipped


# 6.2.20 Ensure shadow group is empty (Scored)
- name: Copy script to audit shadow group
  copy:
    src:  shadow_group_audit.sh
    dest: "{{ os_hardening_scripts_dir }}/shadow_group_audit.sh"
    mode: 0700
  when: "'6.2.20' not in os_hardening_exclusions"
  tags: [ scored, '6.2.20' ]

- name: Run shadow group audit script
  command: "{{ os_hardening_scripts_dir }}/shadow_group_audit.sh"
  register: shadow_group_audit
  changed_when: False
  when: "'6.2.20' not in os_hardening_exclusions"
  tags: [ scored, '6.2.20' ]

- name: Print users assigned to the shadow group
  debug: var=shadow_group_audit.stdout_lines
  when: not shadow_group_audit|skipped

- name: Create group for users assigned to shadow group
  group:
    name:  "{{ item }}"
    state: present
  with_items: "{{ shadow_group_audit.stdout_lines }}"
  when: not shadow_group_audit|skipped

- name: Update primary group of users assigned to shadow group
  user:
    name:  "{{ item }}"
    group: "{{ item }}"
  with_items: "{{ shadow_group_audit.stdout_lines }}"
  when: not shadow_group_audit|skipped

- name: Ensure shadow group is empty
  lineinfile:
    path: /etc/group
    regexp: '^(shadow:[^:]*:[^:]*:)[^:]*'
    line:   '\1'
    backrefs: yes
